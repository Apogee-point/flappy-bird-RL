"""
        Resets the environment to an initial internal state, returning an
        initial observation and info.

        This method generates a new starting state often with some randomness to
        ensure that the agent explores the state space and learns a generalised
        policy about the environment. This randomness can be controlled with the
        seed parameter otherwise if the environment already has a random number
        generator and `reset()` is called with `seed=None`, the RNG is not
        reset.

        Therefore, `reset()` should (in the typical use case) be called with a
        seed right after initialization and then never again.

        For Custom environments, the first line of `reset()` should be
        `super().reset(seed=seed)` which implements the seeding correctly.

        Parameters:
        - seed (optional int): The seed that is used to initialize the
        environment’s PRNG (`np_random`). If the environment does not already
        have a PRNG and `seed=None` (the default option) is passed, a seed will
        be chosen from some source of entropy (e.g. timestamp or /dev/urandom).
        However, if the environment already has a PRNG and `seed=None` is
        passed, the PRNG will not be reset. If you pass an integer, the PRNG
        will be reset even if it already exists. Usually, you want to pass an
        integer right after the environment has been initialized and then never
        again.

        - options (optional dict): Additional information to specify how the
        environment is reset (optional, depending on the specific environment).

        Returns:
        - observation (ObsType): Observation of the initial state. This will be
        an element of `observation_space` (typically a numpy array) and is
        analogous to the observation returned by `step()`.

        - info (dictionary): This dictionary contains auxiliary information
        complementing observation. It should be analogous to the info returned
        by `step()`.
        """
"""
        Run one timestep of the environment’s dynamics using the agent actions.

        When the end of an episode is reached (`terminated` or `truncated`), it
        is necessary to call `reset()` to reset this environment’s state for the
        next episode.

        Parameters:
        - action (ActType): an action provided by the agent to update the
        environment state.

        Returns:
        - observation (ObsType): An element of the environment’s
        `observation_space` as the next observation due to the agent actions.
        An example is a numpy array containing the positions and velocities of
        the pole in CartPole.

        - reward (SupportsFloat): The reward as a result of taking the action.

        - terminated (bool): Whether the agent reaches the terminal state (as
        defined under the MDP of the task) which can be positive or negative.
        An example is reaching the goal state or moving into the lava from the
        Sutton and Barton, Gridworld. If true, the user needs to call `reset()`.

        - truncated (bool): Whether the truncation condition outside the scope
        of the MDP is satisfied. Typically, this is a timelimit, but could also
        be used to indicate an agent physically going out of bounds. Can be used
        to end the episode prematurely before a terminal state is reached. If
        true, the user needs to call `reset()`.

        - info (dict): Contains auxiliary diagnostic information (helpful for
        debugging, learning, and logging). This might, for instance, contain:
        metrics that describe the agent’s performance state, variables that are
        hidden from observations, or individual reward terms that are combined
        to produce the total reward. In OpenAI Gym <v26, it contains
        `TimeLimit.truncated` to distinguish truncation and termination, however
        this is deprecated in favour of returning terminated and truncated
        variables.
        """

"""
        Compute the render frames as specified by render_mode during the
        initialization of the environment.

        The environment’s metadata render modes (`env.metadata[“render_modes”]`)
        should contain the possible ways to implement the render modes. In
        addition, list versions for most render modes is achieved through
        `gymnasium.make` which automatically applies a wrapper to collect
        rendered frames.

        Note: As the render_mode is known during `__init__`, the objects used to
        render the environment state should be initialised in `__init__`.

        By convention, if the render_mode is:
        - None (default): no render is computed.

        - "human": The environment is continuously rendered in the current
        display or terminal, usually for human consumption. This rendering
        should occur during `step()` and `render()` doesn’t need to be called.
        Returns None.

        - "rgb_array": Return a single frame representing the current state of
        the environment. A frame is a `np.ndarray` with shape (x, y, 3)
        representing RGB values for an x-by-y pixel image.
        """

Environment 1

Observation space -> 4
Reward (1000,1,-1000,-10000)

Environment 2 (Random results)

Observation space -> 6
np.array([self._bird.x,self._bird.y, vertical_distance, horizontal_distance,self._bird.velocity, gap])

if any([not pipe.passed and pipe.x < self._bird.xfor pipe in self._pipes]): #* For passing a pipe
        return 1000
elif not self.terminated: #* For staying alive in the game
        return 100
elif self.terminated and self._bird.y + self._bird.image.get_height() >= 730 or self._bird.y < 0:
        return -1000 #* For hitting the ground or the ceiling
else:
        return -10000000 #* For dying

Velocity -> 5.5

Environment 3:

def reward(self) -> SupportsFloat:
if any([not pipe.passed and pipe.x < self._bird.x
        for pipe in self._pipes]): #* For passing a pipe
        return 10000
elif not self.terminated: #* For staying alive in the game
        return 10
elif self.terminated and self._bird.y + self._bird.image.get_height() >= 730 or self._bird.y < 0:
        return -100 #* For hitting the ground or the ceiling
else:
        return -100 #* For dying

Same observation


Environment 4